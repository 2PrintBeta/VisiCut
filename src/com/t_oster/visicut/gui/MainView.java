/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainView.java
 *
 * Created on 18.08.2011, 01:42:04
 */
package com.t_oster.visicut.gui;

import com.t_oster.visicut.misc.ExtensionFilter;
import com.t_oster.visicut.misc.Helper;
import com.t_oster.visicut.PreferencesManager;
import com.t_oster.visicut.VisicutModel;
import com.t_oster.visicut.gui.beans.EditRectangle;
import com.t_oster.visicut.gui.beans.EditRectangle.Button;
import com.t_oster.visicut.misc.MultiFilter;
import com.t_oster.visicut.model.mapping.Mapping;
import com.t_oster.visicut.model.MaterialProfile;
import com.t_oster.visicut.model.graphicelements.GraphicSet;
import com.t_oster.visicut.model.mapping.MappingSet;
import java.awt.Point;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author thommy
 */
public class MainView extends javax.swing.JFrame
{

  /** Creates new form MainView */
  public MainView()
  {
    initComponents();
    this.visicutModel1.setPreferences(PreferencesManager.getInstance().getPreferences());
    this.captureImage();
    String[] args = VisicutApp.getApplication().getProgramArguments();
    for (String s : args)
    {
      File f = new File(s);
      if (f.exists())
      {
        this.loadFile(f);
      }
    }

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

    openFileChooser = new javax.swing.JFileChooser();
    visicutModel1 = new com.t_oster.visicut.VisicutModel();
    profileManager1 = new com.t_oster.visicut.model.ProfileManager();
    filesDropSupport1 = new com.t_oster.visicut.gui.beans.FilesDropSupport();
    mappingManager1 = new com.t_oster.visicut.model.MappingManager();
    saveFileChooser = new javax.swing.JFileChooser();
    jPanel2 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    mappingComboBox = new javax.swing.JComboBox();
    editMappingButton = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();
    dimensionWidthTextField = new javax.swing.JTextField();
    dimesnionsHeightTextfield = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    materialHeightTextField = new javax.swing.JTextField();
    materialComboBox = new com.t_oster.visicut.gui.beans.MaterialComboBox();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    drawGridCheckbox = new javax.swing.JCheckBox();
    jPanel1 = new javax.swing.JPanel();
    jLayeredPane1 = new javax.swing.JLayeredPane();
    previewPanel = new com.t_oster.visicut.gui.beans.PreviewPanel();
    togglePreviewButton = new javax.swing.JToggleButton();
    toggleCutLinesButton = new javax.swing.JToggleButton();
    executeJobButton = new javax.swing.JButton();
    saveButton = new javax.swing.JButton();
    captureImageButton = new javax.swing.JButton();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    newMenuItem = new javax.swing.JMenuItem();
    openMenuItem = new javax.swing.JMenuItem();
    saveMenuItem = new javax.swing.JMenuItem();
    saveAsMenuItem = new javax.swing.JMenuItem();
    exitMenuItem = new javax.swing.JMenuItem();
    editMenu = new javax.swing.JMenu();
    calibrateCameraMenuItem = new javax.swing.JMenuItem();
    executeJobMenuItem = new javax.swing.JMenuItem();
    editMappingMenuItem = new javax.swing.JMenuItem();
    viewMenu = new javax.swing.JMenu();
    showGridMenuItem = new javax.swing.JCheckBoxMenuItem();
    jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
    renderPreviewMenuItem = new javax.swing.JCheckBoxMenuItem();
    helpMenu = new javax.swing.JMenu();
    aboutMenuItem = new javax.swing.JMenuItem();

    openFileChooser.setName("openFileChooser"); // NOI18N

    visicutModel1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        visicutModel1PropertyChange(evt);
      }
    });
    this.visicutModel1.setMaterial(this.profileManager1.getMaterials().get(0));

    filesDropSupport1.setComponent(previewPanel);
    filesDropSupport1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        filesDropSupport1PropertyChange(evt);
      }
    });

    saveFileChooser.setAcceptAllFileFilterUsed(false);
    saveFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
    saveFileChooser.setFileFilter(new ExtensionFilter(".plf", "VisiCut Portable Laser File"));
    saveFileChooser.setName("saveFileChooser"); // NOI18N

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setName("Form"); // NOI18N

    org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${loadedFile} - VisiCut"), this, org.jdesktop.beansbinding.BeanProperty.create("title"), "Filename to Title");
    binding.setSourceNullValue("VisiCut");
    bindingGroup.addBinding(binding);

    jPanel2.setName("jPanel2"); // NOI18N

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.t_oster.visicut.gui.VisicutApp.class).getContext().getResourceMap(MainView.class);
    jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
    jLabel1.setName("jLabel1"); // NOI18N

    jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
    jLabel2.setName("jLabel2"); // NOI18N

    mappingComboBox.setName("mappingComboBox"); // NOI18N

    org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${mappingSets}");
    org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, mappingManager1, eLProperty, mappingComboBox, "MappingSets from Manager");
    bindingGroup.addBinding(jComboBoxBinding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${mappings}"), mappingComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"), "MappingsFromModel");
    bindingGroup.addBinding(binding);

    mappingComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        mappingComboBoxActionPerformed(evt);
      }
    });

    editMappingButton.setText(resourceMap.getString("editMappingButton.text")); // NOI18N
    editMappingButton.setName("editMappingButton"); // NOI18N
    editMappingButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        editMappingButtonActionPerformed(evt);
      }
    });

    jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
    jLabel3.setName("jLabel3"); // NOI18N

    dimensionWidthTextField.setName("dimensionWidthTextField"); // NOI18N

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${material.width}"), dimensionWidthTextField, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"), "tfw"); // NOI18N
    bindingGroup.addBinding(binding);

    dimesnionsHeightTextfield.setName("dimesnionsHeightTextfield"); // NOI18N

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${material.height}"), dimesnionsHeightTextfield, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"), "tfh");
    bindingGroup.addBinding(binding);

    jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
    jLabel4.setName("jLabel4"); // NOI18N

    jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
    jLabel5.setName("jLabel5"); // NOI18N

    materialHeightTextField.setName("materialHeightTextField"); // NOI18N

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${material.depth}"), materialHeightTextField, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"), "tfd");
    bindingGroup.addBinding(binding);

    materialComboBox.setName("materialComboBox"); // NOI18N

    eLProperty = org.jdesktop.beansbinding.ELProperty.create("${materials}");
    jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, profileManager1, eLProperty, materialComboBox);
    bindingGroup.addBinding(jComboBoxBinding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${material}"), materialComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"), "MaterialFromModelToComboBox");
    bindingGroup.addBinding(binding);

    materialComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        materialComboBoxActionPerformed(evt);
      }
    });

    jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
    jLabel6.setName("jLabel6"); // NOI18N

    jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
    jLabel7.setName("jLabel7"); // NOI18N

    drawGridCheckbox.setText(resourceMap.getString("drawGridCheckbox.text")); // NOI18N
    drawGridCheckbox.setName("drawGridCheckbox"); // NOI18N

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, previewPanel, org.jdesktop.beansbinding.ELProperty.create("${showGrid}"), drawGridCheckbox, org.jdesktop.beansbinding.BeanProperty.create("selected"), "gridcheckbox");
    bindingGroup.addBinding(binding);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(drawGridCheckbox)
          .addComponent(jLabel3)
          .addComponent(jLabel5)
          .addComponent(jLabel2)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(materialHeightTextField, javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(dimensionWidthTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dimesnionsHeightTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6))
              .addComponent(jLabel7)))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addComponent(mappingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
            .addComponent(editMappingButton))
          .addComponent(jLabel1)
          .addComponent(materialComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(materialComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(dimensionWidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel4)
          .addComponent(dimesnionsHeightTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel6))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel5)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(materialHeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel7))
        .addGap(10, 10, 10)
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(mappingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(editMappingButton))
        .addGap(18, 18, 18)
        .addComponent(drawGridCheckbox)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
    jPanel1.setName("jPanel1"); // NOI18N

    jLayeredPane1.setName("jLayeredPane1"); // NOI18N

    previewPanel.setBorder(null);
    previewPanel.setAutoCenter(true);
    previewPanel.setName("previewPanel"); // NOI18N

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${backgroundImage}"), previewPanel, org.jdesktop.beansbinding.BeanProperty.create("backgroundImage"), "BackImageFromModel");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${graphicObjects}"), previewPanel, org.jdesktop.beansbinding.BeanProperty.create("graphicObjects"), "ModelToPreviewObjects");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${mappings}"), previewPanel, org.jdesktop.beansbinding.BeanProperty.create("mappings"), "MappingsFromModelToPreviewPanel");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${material}"), previewPanel, org.jdesktop.beansbinding.BeanProperty.create("material"));
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, visicutModel1, org.jdesktop.beansbinding.ELProperty.create("${preferences.camCalibration}"), previewPanel, org.jdesktop.beansbinding.BeanProperty.create("previewTransformation"), "TransformFromModel");
    bindingGroup.addBinding(binding);

    previewPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
        previewPanelMouseWheelMoved(evt);
      }
    });
    previewPanel.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        previewPanelMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        previewPanelMouseReleased(evt);
      }
    });
    previewPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseDragged(java.awt.event.MouseEvent evt) {
        previewPanelMouseDragged(evt);
      }
    });

    javax.swing.GroupLayout previewPanelLayout = new javax.swing.GroupLayout(previewPanel);
    previewPanel.setLayout(previewPanelLayout);
    previewPanelLayout.setHorizontalGroup(
      previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 600, Short.MAX_VALUE)
    );
    previewPanelLayout.setVerticalGroup(
      previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 620, Short.MAX_VALUE)
    );

    previewPanel.setBounds(0, 0, 600, 620);
    jLayeredPane1.add(previewPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

    togglePreviewButton.setSelected(true);
    togglePreviewButton.setText(resourceMap.getString("togglePreviewButton.text")); // NOI18N
    togglePreviewButton.setEnabled(false);
    togglePreviewButton.setName("togglePreviewButton"); // NOI18N
    togglePreviewButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        togglePreviewButtonActionPerformed(evt);
      }
    });
    togglePreviewButton.setBounds(0, 0, 70, 28);
    jLayeredPane1.add(togglePreviewButton, javax.swing.JLayeredPane.PALETTE_LAYER);

    toggleCutLinesButton.setText(resourceMap.getString("toggleCutLinesButton.text")); // NOI18N
    toggleCutLinesButton.setName("toggleCutLinesButton"); // NOI18N
    toggleCutLinesButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        toggleCutLinesButtonActionPerformed(evt);
      }
    });
    toggleCutLinesButton.setBounds(70, 0, 80, 28);
    jLayeredPane1.add(toggleCutLinesButton, javax.swing.JLayeredPane.PALETTE_LAYER);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
    );

    executeJobButton.setText(resourceMap.getString("executeJobButton.text")); // NOI18N
    executeJobButton.setName("executeJobButton"); // NOI18N
    executeJobButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        executeJobButtonActionPerformed(evt);
      }
    });

    saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
    saveButton.setName("saveButton"); // NOI18N
    saveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveButtonActionPerformed(evt);
      }
    });

    captureImageButton.setText(resourceMap.getString("captureImageButton.text")); // NOI18N
    captureImageButton.setName("captureImageButton"); // NOI18N
    captureImageButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        captureImageButtonActionPerformed(evt);
      }
    });

    menuBar.setName("menuBar"); // NOI18N

    fileMenu.setMnemonic('f');
    fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
    fileMenu.setName("fileMenu"); // NOI18N

    newMenuItem.setText(resourceMap.getString("newMenuItem.text")); // NOI18N
    newMenuItem.setName("newMenuItem"); // NOI18N
    newMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(newMenuItem);

    openMenuItem.setText(resourceMap.getString("openMenuItem.text")); // NOI18N
    openMenuItem.setName("openMenuItem"); // NOI18N
    openMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(openMenuItem);

    saveMenuItem.setMnemonic('s');
    saveMenuItem.setText(resourceMap.getString("saveMenuItem.text")); // NOI18N
    saveMenuItem.setName("saveMenuItem"); // NOI18N
    saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(saveMenuItem);

    saveAsMenuItem.setMnemonic('a');
    saveAsMenuItem.setText(resourceMap.getString("saveAsMenuItem.text")); // NOI18N
    saveAsMenuItem.setName("saveAsMenuItem"); // NOI18N
    saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveAsMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(saveAsMenuItem);

    exitMenuItem.setMnemonic('x');
    exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
    exitMenuItem.setName("exitMenuItem"); // NOI18N
    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    editMenu.setMnemonic('e');
    editMenu.setText(resourceMap.getString("editMenu.text")); // NOI18N
    editMenu.setName("editMenu"); // NOI18N

    calibrateCameraMenuItem.setText(resourceMap.getString("calibrateCameraMenuItem.text")); // NOI18N
    calibrateCameraMenuItem.setName("calibrateCameraMenuItem"); // NOI18N
    calibrateCameraMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        calibrateCameraMenuItemActionPerformed(evt);
      }
    });
    editMenu.add(calibrateCameraMenuItem);

    executeJobMenuItem.setText(resourceMap.getString("executeJobMenuItem.text")); // NOI18N
    executeJobMenuItem.setName("executeJobMenuItem"); // NOI18N
    executeJobMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        executeJobMenuItemActionPerformed(evt);
      }
    });
    editMenu.add(executeJobMenuItem);

    editMappingMenuItem.setText(resourceMap.getString("editMappingMenuItem.text")); // NOI18N
    editMappingMenuItem.setName("editMappingMenuItem"); // NOI18N
    editMappingMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        editMappingMenuItemActionPerformed(evt);
      }
    });
    editMenu.add(editMappingMenuItem);

    menuBar.add(editMenu);

    viewMenu.setText(resourceMap.getString("viewMenu.text")); // NOI18N
    viewMenu.setName("viewMenu"); // NOI18N

    showGridMenuItem.setText(resourceMap.getString("showGridMenuItem.text")); // NOI18N
    showGridMenuItem.setName("showGridMenuItem"); // NOI18N

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, previewPanel, org.jdesktop.beansbinding.ELProperty.create("${showGrid}"), showGridMenuItem, org.jdesktop.beansbinding.BeanProperty.create("selected"), "ShowGrid");
    bindingGroup.addBinding(binding);

    viewMenu.add(showGridMenuItem);

    jCheckBoxMenuItem1.setText(resourceMap.getString("jCheckBoxMenuItem1.text")); // NOI18N
    jCheckBoxMenuItem1.setName("jCheckBoxMenuItem1"); // NOI18N

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, previewPanel, org.jdesktop.beansbinding.ELProperty.create("${highlightCutLines}"), jCheckBoxMenuItem1, org.jdesktop.beansbinding.BeanProperty.create("selected"), "HighlightCutLines");
    bindingGroup.addBinding(binding);

    viewMenu.add(jCheckBoxMenuItem1);

    renderPreviewMenuItem.setText(resourceMap.getString("renderPreviewMenuItem.text")); // NOI18N
    renderPreviewMenuItem.setName("renderPreviewMenuItem"); // NOI18N

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, previewPanel, org.jdesktop.beansbinding.ELProperty.create("${drawPreview}"), renderPreviewMenuItem, org.jdesktop.beansbinding.BeanProperty.create("selected"), "PreviewMenuCb");
    bindingGroup.addBinding(binding);

    viewMenu.add(renderPreviewMenuItem);

    menuBar.add(viewMenu);

    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.t_oster.visicut.gui.VisicutApp.class).getContext().getActionMap(MainView.class, this);
    helpMenu.setAction(actionMap.get("showAboutDialog")); // NOI18N
    helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
    helpMenu.setName("helpMenu"); // NOI18N

    aboutMenuItem.setAction(actionMap.get("showAboutDialog")); // NOI18N
    aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
    aboutMenuItem.setName("aboutMenuItem"); // NOI18N
    aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        aboutMenuItemActionPerformed(evt);
      }
    });
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(captureImageButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(saveButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(executeJobButton)
            .addContainerGap())
          .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 290, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(executeJobButton)
          .addComponent(saveButton)
          .addComponent(captureImageButton))
        .addContainerGap())
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    bindingGroup.bind();

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
      System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

  public void loadFile(File file)
  {
    try
    {
      if (VisicutModel.PLFFilter.accept(file))
      {
        this.visicutModel1.loadFromFile(this.profileManager1, this.mappingManager1, file);
      }
      else
      {
        this.visicutModel1.loadGraphicFile(file);
      }
      this.selectedSet = this.visicutModel1.getGraphicObjects();
      this.editRect = selectedSet.size() == 0 ? null : new EditRectangle(this.selectedSet.getBoundingBox());
      this.previewPanel.setEditRectangle(editRect);
    }
    catch (Exception e)
    {
      JOptionPane.showMessageDialog(this, "Error while opening '" + file.getName() + "':\n" + e.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
  }

private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
  openFileChooser.setAcceptAllFileFilterUsed(false);
  openFileChooser.addChoosableFileFilter(
    new MultiFilter(
    new FileFilter[]
    {
      this.visicutModel1.getGraphicFileImporter().getFileFilter(),
      VisicutModel.PLFFilter
    }, "All supported Files"));
  openFileChooser.addChoosableFileFilter(VisicutModel.PLFFilter);
  for (FileFilter f : this.visicutModel1.getGraphicFileImporter().getFileFilters())
  {
    openFileChooser.addChoosableFileFilter(f);
  }
  int returnVal = openFileChooser.showOpenDialog(this);
  if (returnVal == JFileChooser.APPROVE_OPTION)
  {
    File file = openFileChooser.getSelectedFile();
    loadFile(file);
  }
}//GEN-LAST:event_openMenuItemActionPerformed

  private void editMapping()
  {
    MappingDialog md = new MappingDialog();
    md.setGraphicElements(this.visicutModel1.getGraphicObjects());
    md.setMappings(this.visicutModel1.getMappings());
    md.setMaterial(this.visicutModel1.getMaterial());
    md.setMappingManager(this.mappingManager1);
    md.setVisible(true);
    this.visicutModel1.setMappings(md.getMappings());
    this.previewPanel.repaint();
  }

private void editMappingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMappingButtonActionPerformed
  this.editMapping();
}//GEN-LAST:event_editMappingButtonActionPerformed

private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
  VisicutAboutBox box = new VisicutAboutBox(this);
  box.setModal(true);
  box.setVisible(true);
}//GEN-LAST:event_aboutMenuItemActionPerformed
  private enum MouseAction
  {

    movingBackground,
    movingSet,
    resizingSet,};
  private Point lastMousePosition = null;
  private MouseAction currentAction = null;
  private Button currentButton = null;
  private GraphicSet selectedSet = null;
  private EditRectangle editRect = null;
private void previewPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewPanelMousePressed
  lastMousePosition = evt.getPoint();
  currentAction = MouseAction.movingBackground;
  if (editRect != null)
  {
    Rectangle2D curRect = Helper.transform(editRect, this.previewPanel.getLastDrawnTransform());
    Button b = editRect.getButtonByPoint(lastMousePosition, this.previewPanel.getLastDrawnTransform());
    if (b != null)
    {
      currentButton = b;
      currentAction = MouseAction.resizingSet;
    }
    else if (curRect.contains(lastMousePosition))
    {
      currentAction = MouseAction.movingSet;
    }
  }
}//GEN-LAST:event_previewPanelMousePressed

private void previewPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewPanelMouseReleased

  if (currentAction == MouseAction.resizingSet)
  {
    //Apply changes to the EditRectangle to the selectedSet
    Rectangle2D src = selectedSet.getOriginalBoundingBox();
    selectedSet.setTransform(Helper.getTransform(src, editRect));
    this.previewPanel.repaint();
  }
  else if (this.selectedSet != null)
  {
    Rectangle2D e = Helper.transform(editRect, this.previewPanel.getLastDrawnTransform());
    if (e.contains(evt.getPoint()))
    {
      //let the set stay selected
    }
    else
    {
      selectedSet = null;
      editRect = null;
      this.previewPanel.setEditRectangle(null);
    }
  }
  else if (this.visicutModel1.getGraphicObjects() != null && this.visicutModel1.getMappings().size() > 0)
  {
    Rectangle2D bb = this.visicutModel1.getGraphicObjects().getBoundingBox();
    Rectangle2D e = Helper.transform(bb, this.previewPanel.getLastDrawnTransform());
    if (e.contains(evt.getPoint()))
    {
      selectedSet = this.visicutModel1.getGraphicObjects();
      editRect = new EditRectangle(bb);
      this.previewPanel.setEditRectangle(editRect);
    }
    else
    {
      selectedSet = null;
      editRect = null;
      this.previewPanel.setEditRectangle(null);
    }
  }
  lastMousePosition = null;
}//GEN-LAST:event_previewPanelMouseReleased
private void previewPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewPanelMouseDragged
  if (lastMousePosition != null)
  {
    Point diff = new Point(evt.getPoint().x - lastMousePosition.x, evt.getPoint().y - lastMousePosition.y);
    try
    {
      switch (currentAction)
      {
        case resizingSet:
        {
          this.previewPanel.getLastDrawnTransform().createInverse().deltaTransform(diff, diff);
          switch (currentButton)
          {
            case BOTTOM_RIGHT:
            {
              int offset = Math.abs(diff.x) > Math.abs(diff.y) ? diff.x : diff.y;
              editRect.height += (offset * editRect.height / editRect.width);
              editRect.width += offset;
              break;
            }
            case BOTTOM_LEFT:
            {
              int offset = Math.abs(diff.x) > Math.abs(diff.y) ? diff.x : diff.y;
              editRect.height -= (offset * editRect.height / editRect.width);
              editRect.x += offset;
              editRect.width -= offset;
              break;
            }
            case TOP_RIGHT:
            {
              int offset = Math.abs(diff.x) > Math.abs(diff.y) ? diff.x : diff.y;
              editRect.y -= (offset * editRect.height / editRect.width);
              editRect.height += (offset * editRect.height / editRect.width);
              editRect.width += offset;
              break;
            }
            case TOP_LEFT:
            {
              int offset = Math.abs(diff.x) > Math.abs(diff.y) ? diff.x : diff.y;
              editRect.y += (offset * editRect.height / editRect.width);
              editRect.height -= (offset * editRect.height / editRect.width);
              editRect.x += offset;
              editRect.width -= offset;
              break;
            }
            case CENTER_RIGHT:
            {
              this.editRect.width += diff.x;
              break;
            }
            case TOP_CENTER:
            {
              this.editRect.y += diff.y;
              this.editRect.height -= diff.y;
              break;
            }
            case BOTTOM_CENTER:
            {
              this.editRect.height += diff.y;
              break;
            }
            case CENTER_LEFT:
            {
              this.editRect.x += diff.x;
              this.editRect.width -= diff.x;
              break;
            }
          }
          this.previewPanel.setEditRectangle(editRect);
          break;
        }
        case movingSet:
        {
          this.previewPanel.getLastDrawnTransform().createInverse().deltaTransform(diff, diff);
          if (selectedSet.getTransform() != null)
          {
            AffineTransform tr = AffineTransform.getTranslateInstance(diff.x, diff.y);
            tr.concatenate(selectedSet.getTransform());
            selectedSet.setTransform(tr);
          }
          else
          {
            selectedSet.setTransform(AffineTransform.getTranslateInstance(diff.x, diff.y));
          }
          Rectangle2D bb = selectedSet.getBoundingBox();
          editRect = new EditRectangle(bb);
          this.previewPanel.setEditRectangle(editRect);
          break;
        }
        case movingBackground:
        {
          Point center = this.previewPanel.getCenter();
          center.translate(-diff.x * 1000 / this.previewPanel.getZoom(), -diff.y * 1000 / this.previewPanel.getZoom());
          this.previewPanel.setCenter(center);
          break;
        }
      }
      this.repaint();
    }
    catch (NoninvertibleTransformException ex)
    {
      Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
    }
    lastMousePosition = evt.getPoint();
  }
}//GEN-LAST:event_previewPanelMouseDragged

  private void executeJob()
  {
    try
    {
      this.visicutModel1.sendJob();
      JOptionPane.showMessageDialog(this, "Please press START on the Lasercutter:\n" + this.visicutModel1.getPreferences().getLaserCutter().getName(), "Job sent", JOptionPane.INFORMATION_MESSAGE);
    }
    catch (Exception ex)
    {
      Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
      JOptionPane.showMessageDialog(this, "Error: " + ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
  }

private void executeJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeJobButtonActionPerformed
  this.executeJob();
}//GEN-LAST:event_executeJobButtonActionPerformed

private void previewPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_previewPanelMouseWheelMoved
{//GEN-HEADEREND:event_previewPanelMouseWheelMoved
  if (evt.getScrollType() == MouseWheelEvent.WHEEL_UNIT_SCROLL)
  {
    this.previewPanel.setZoom(this.previewPanel.getZoom() - (evt.getUnitsToScroll() * this.previewPanel.getZoom() / 32));
  }
}//GEN-LAST:event_previewPanelMouseWheelMoved

private void filesDropSupport1PropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_filesDropSupport1PropertyChange
{//GEN-HEADEREND:event_filesDropSupport1PropertyChange
  if (this.filesDropSupport1.getDroppedFiles() != null && this.filesDropSupport1.getDroppedFiles().size() > 0)
  {
    for (File f : this.filesDropSupport1.getDroppedFiles())
    {
      this.loadFile(f);
    }
  }
}//GEN-LAST:event_filesDropSupport1PropertyChange

private void mappingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mappingComboBoxActionPerformed
  MappingSet ms = (MappingSet) this.mappingComboBox.getSelectedItem();
  if (ms != null && !ms.equals(this.visicutModel1.getMappings()) && this.visicutModel1.getMaterial() != null)
  {
    MaterialProfile m = this.visicutModel1.getMaterial();
    MappingSet supportedSubset = new MappingSet();
    supportedSubset.setName(ms.getName() + "*");
    String mappings = "";
    //Check if the current Material supports all Mappings in this set
    for (Mapping map : ms)
    {
      if (m.getLaserProfile(map.getProfileName()) == null)
      {
        mappings += map.getProfileName() + "\n";
      }
      else
      {
        supportedSubset.add(map);
      }
    }
    if (!"".equals(mappings))//there are unsupported Mappings
    {
      if (JOptionPane.showConfirmDialog(this, "The Mapping you selected contains the following Profiles: \n" + mappings
        + "which are not supported by the current Material. If you proceed all Items matching to these Profiles will be unmapped.", "Warning", JOptionPane.OK_CANCEL_OPTION)
        == JOptionPane.CANCEL_OPTION)
      {
        this.mappingComboBox.setSelectedItem(this.visicutModel1.getMappings());
        return;
      }
      this.mappingManager1.getMappingSets().add(supportedSubset);
      this.visicutModel1.setMappings(supportedSubset);
    }
    else
    {
      this.visicutModel1.setMappings(ms);
    }
  }
}//GEN-LAST:event_mappingComboBoxActionPerformed

private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
  int returnVal = saveFileChooser.showSaveDialog(this);
  if (returnVal == JFileChooser.APPROVE_OPTION)
  {
    File file = saveFileChooser.getSelectedFile();
    if (!file.getName().endsWith("plf"))
    {
      file = new File(file.getAbsolutePath() + ".plf");
    }
    try
    {
      this.visicutModel1.saveToFile(this.profileManager1, this.mappingManager1, file);
    }
    catch (Exception ex)
    {
      Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
      JOptionPane.showMessageDialog(this, "Error saving File: " + ex.getLocalizedMessage());
    }
  }
  else
  {
    System.out.println("File access cancelled by user.");
  }
}//GEN-LAST:event_saveButtonActionPerformed

private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
  this.saveButtonActionPerformed(evt);
}//GEN-LAST:event_saveAsMenuItemActionPerformed

private void visicutModel1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_visicutModel1PropertyChange
  if (evt.getPropertyName().equals(VisicutModel.PROP_LOADEDFILE))
  {
    this.saveMenuItem.setEnabled(this.visicutModel1.getLoadedFile() != null);
  }
}//GEN-LAST:event_visicutModel1PropertyChange

private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
  if (this.visicutModel1.getLoadedFile() == null || !VisicutModel.PLFFilter.accept(this.visicutModel1.getLoadedFile()))
  {//File is not PLF or no file loaded yet
    this.saveAsMenuItemActionPerformed(evt);
    return;
  }
  try
  {
    this.visicutModel1.saveToFile(this.profileManager1, this.mappingManager1, this.visicutModel1.getLoadedFile());
  }
  catch (Exception ex)
  {
    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(this, "Error saving File:\n" + ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
  }
}//GEN-LAST:event_saveMenuItemActionPerformed

private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
  this.editRect = null;
  this.previewPanel.setEditRectangle(null);
  this.visicutModel1.setGraphicObjects(new GraphicSet());
}//GEN-LAST:event_newMenuItemActionPerformed

private void calibrateCameraMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibrateCameraMenuItemActionPerformed

  CamCalibrationDialog ccd = new CamCalibrationDialog();
  ccd.setBackgroundImage(this.visicutModel1.getBackgroundImage());
  ccd.setImageURL(this.visicutModel1.getPreferences().getBackgroundImageURL());
  ccd.setLaserCutter(this.visicutModel1.getPreferences().getLaserCutter());
  ccd.setResultingTransformation(this.visicutModel1.getPreferences().getCamCalibration());
  ccd.setVisible(true);
  this.visicutModel1.getPreferences().setCamCalibration(ccd.getResultingTransformation());
  try
  {
    PreferencesManager.getInstance().savePreferences();
  }
  catch (FileNotFoundException ex)
  {
    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(this, "Error while saving Settings: " + ex.getLocalizedMessage());
  }
}//GEN-LAST:event_calibrateCameraMenuItemActionPerformed

private void executeJobMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeJobMenuItemActionPerformed
  this.executeJob();
}//GEN-LAST:event_executeJobMenuItemActionPerformed

  private void captureImage()
  {
    new Thread()
    {

      @Override
      public void run()
      {
        MainView.this.captureImageButton.setEnabled(false);
        try
        {
          URL src = new URL(MainView.this.visicutModel1.getPreferences().getBackgroundImageURL());
          if (src != null)
          {
            BufferedImage back = ImageIO.read(src);
            if (back != null && MainView.this.visicutModel1.getBackgroundImage() == null)
            {//First Time Image is Captured => resize View
              MainView.this.previewPanel.setCenter(new Point(back.getWidth()/2, back.getHeight()/2));
              MainView.this.previewPanel.setZoom(1000*MainView.this.previewPanel.getWidth()/back.getWidth());
            }
            MainView.this.visicutModel1.setBackgroundImage(back);
          }
        }
        catch (Exception ex)
        {
          JOptionPane.showMessageDialog(MainView.this, "Error loading Image:" + ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        MainView.this.captureImageButton.setEnabled(true);
      }
    }.start();
  }

private void captureImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureImageButtonActionPerformed
  captureImage();
}//GEN-LAST:event_captureImageButtonActionPerformed

private void editMappingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMappingMenuItemActionPerformed
  this.editMapping();
}//GEN-LAST:event_editMappingMenuItemActionPerformed

private void materialComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materialComboBoxActionPerformed
  //Check if Material supports all Mappings
  MaterialProfile newMaterial = (MaterialProfile) this.materialComboBox.getSelectedItem();
  if (newMaterial != null && !newMaterial.equals(this.visicutModel1.getMaterial()))
  {
    if (this.visicutModel1.getMappings() != null)
    {
      MappingSet mappings = this.visicutModel1.getMappings();
      for (Mapping m : mappings)
      {
        if (newMaterial.getLaserProfile(m.getProfileName()) == null)
        {
          JOptionPane.showMessageDialog(this, "The selected Material does not support the Profile '"
            + m.getProfileName() + "', but your current Mapping '" + this.visicutModel1.getMappings().getName() + "' uses it.\n"
            + "Please select a differend Mapping or a different Material.", "Error", JOptionPane.OK_OPTION);
          this.materialComboBox.setSelectedItem(this.visicutModel1.getMaterial());
          return;
        }
      }
    }
  }
  this.visicutModel1.setMaterial(newMaterial);
}//GEN-LAST:event_materialComboBoxActionPerformed

  private void togglePreviewMode()
  {
    if (this.togglePreviewButton.isEnabled())
    {
      this.previewPanel.setDrawPreview(true);
      this.previewPanel.setHighlightCutLines(false);
      this.togglePreviewButton.setEnabled(false);
      this.togglePreviewButton.setSelected(true);
      this.toggleCutLinesButton.setEnabled(true);
      this.toggleCutLinesButton.setSelected(false);
    }
    else
    {
      this.previewPanel.setDrawPreview(false);
      this.previewPanel.setHighlightCutLines(true);
      this.togglePreviewButton.setEnabled(true);
      this.togglePreviewButton.setSelected(false);
      this.toggleCutLinesButton.setEnabled(false);
      this.toggleCutLinesButton.setSelected(true);
    }
  }

private void togglePreviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglePreviewButtonActionPerformed
  togglePreviewMode();
}//GEN-LAST:event_togglePreviewButtonActionPerformed

private void toggleCutLinesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleCutLinesButtonActionPerformed
  togglePreviewMode();
}//GEN-LAST:event_toggleCutLinesButtonActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JMenuItem calibrateCameraMenuItem;
  private javax.swing.JButton captureImageButton;
  private javax.swing.JTextField dimensionWidthTextField;
  private javax.swing.JTextField dimesnionsHeightTextfield;
  private javax.swing.JCheckBox drawGridCheckbox;
  private javax.swing.JButton editMappingButton;
  private javax.swing.JMenuItem editMappingMenuItem;
  private javax.swing.JMenu editMenu;
  private javax.swing.JButton executeJobButton;
  private javax.swing.JMenuItem executeJobMenuItem;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JMenu fileMenu;
  private com.t_oster.visicut.gui.beans.FilesDropSupport filesDropSupport1;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLayeredPane jLayeredPane1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JComboBox mappingComboBox;
  private com.t_oster.visicut.model.MappingManager mappingManager1;
  private com.t_oster.visicut.gui.beans.MaterialComboBox materialComboBox;
  private javax.swing.JTextField materialHeightTextField;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JMenuItem newMenuItem;
  private javax.swing.JFileChooser openFileChooser;
  private javax.swing.JMenuItem openMenuItem;
  private com.t_oster.visicut.gui.beans.PreviewPanel previewPanel;
  private com.t_oster.visicut.model.ProfileManager profileManager1;
  private javax.swing.JCheckBoxMenuItem renderPreviewMenuItem;
  private javax.swing.JMenuItem saveAsMenuItem;
  private javax.swing.JButton saveButton;
  private javax.swing.JFileChooser saveFileChooser;
  private javax.swing.JMenuItem saveMenuItem;
  private javax.swing.JCheckBoxMenuItem showGridMenuItem;
  private javax.swing.JToggleButton toggleCutLinesButton;
  private javax.swing.JToggleButton togglePreviewButton;
  private javax.swing.JMenu viewMenu;
  private com.t_oster.visicut.VisicutModel visicutModel1;
  private org.jdesktop.beansbinding.BindingGroup bindingGroup;
  // End of variables declaration//GEN-END:variables
}
